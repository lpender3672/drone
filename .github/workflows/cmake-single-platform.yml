# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: arm-none-eabi-gcc GNU Arm Embedded Toolchain
      uses: carlosperate/arm-none-eabi-gcc-action@v1.8.1
      id: arm-none-eabi-gcc-action
      
    - name: The `path` to the toolchain executables can then be obtained as an output
      run: echo "PICO_TOOLCHAIN_PATH=${{ steps.arm-none-eabi-gcc-action.outputs.path }}" >> "$GITHUB_ENV"
            
    - name: Clone Pico SDK
      run: git clone https://github.com/raspberrypi/pico-sdk.git  ${{github.workspace}}/pico-sdk --recurse-submodules

    - name: Set PICO_SDK_PATH
      run: echo "PICO_SDK_PATH=${{github.workspace}}/pico-sdk" >> "$GITHUB_ENV"

    - name: Install Eigen
      run: wget -q -O - "https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.gz" | tar -xzf - -C ${{github.workspace}}

    - name: Set Eigen3_DIR
      run: echo "Eigen3_DIR=${{github.workspace}}/eigen-3.4.0/share/eigen3/cmake" >> "$GITHUB_ENV"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

